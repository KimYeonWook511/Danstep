spring.application.name=danstep
server.port=8080
# server.port=8081

# datasource ######################################################################################
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
# 3306 포트로 외부 접근을 막기 위해 아래 방식은 사용하지 않음!
# spring.datasource.hikari.jdbc-url=jdbc:mysql://i11a406.p.ssafy.io:3306/danstep_db?serverTimezone=UTC&characterEncoding=UTF-8

# Windows나 Mac의 경우 Docker를 사용하는 호스트에 접근하는 방법!
# spring.datasource.hikari.jdbc-url=jdbc:mysql://host.docker.internal:3306/danstep_db?serverTimezone=UTC&characterEncoding=UTF-8

# Linux는 --network host 옵션을 docker run할 때 주어서 host 영역을 공유할 수 있음! 
# (다만 host 영역을 공유하면 docker의 의미가..)
# spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/danstep_db?serverTimezone=UTC&characterEncoding=UTF-8

# 이제는 Docker 네트워크를 사용해서 컨테이너 간 네트워크를 공유하도록 만듦
# MySQL 컨테이너를 사용하는 방법
spring.datasource.hikari.jdbc-url=jdbc:mysql://danstep-mysql-container:3306/danstep_db?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.hikari.username=${DB_USERNAME}
spring.datasource.hikari.password=${DB_PASSWORD}
#spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/danstep_db?serverTimezone=UTC&characterEncoding=UTF-8
#spring.datasource.hikari.username=root
#spring.datasource.hikari.password=root
spring.datasource.hikari.mapper-locations=classpath:/mapper/**/*.xml
##################################################################################################

# MyBatis 설정
# mybatis.configuration.map-underscore-to-camel-case=true
# mybatis.type-aliases-package=com.danstep.model
# mybatis.config-location=classpath:mybatis/sqlmap-config.xml

# JWT 설정
spring.jwt.secret=${JWT_SECRET}
#jwt.accesstoken.expiretime=3600
#jwt.refreshtoken.expiretime=2592000

# JPA 설정 ######################################################################################
# spring.jpa.hibernate.ddl-auto
    # create: 기존 테이블을 삭제하고 새로 생성 (DROP - CREATE)
    # create-drop: create와 동일하지만 애플리케이션 종료 시 테이블 삭제 (DROP - CREATE - DROP)
    # update: 데이터베이스 테이블 - 엔터티 매핑 정보를 비교해서 변경 사항만 수정
    # validate: 데이터베이스 테이블 - 엔터티 매핑 정보를 비교해서 차이가 있으면 애플리케이션 실행을 중단
    # none: 자동 생성 기능을 사용하지 않음
spring.jpa.hibernate.ddl-auto=update
############################################################################################

# 업로드 파일 용량 설정 ############################################################################
spring.servlet.multipart.maxFileSize=50MB
spring.servlet.multipart.maxRequestSize=50MB
############################################################################################

# S3 설정 #######################################################################################
# AWS Region
cloud.aws.region.static=ap-southeast-2
# AWS 스택 자동 생성 설정
cloud.aws.stack.auto-=false

# Admin 계정 (public, private 다 접근 가능)
cloud.aws.credentials.admin.accessKey=${AWS_ACCESS_KEY_ADMIN}
cloud.aws.credentials.admin.secretKey=${AWS_SECRET_KEY_ADMIN}
# User 계정 (public read만 가능)
cloud.aws.credentials.user.accessKey=${AWS_ACCESS_KEY_USER}
cloud.aws.credentials.user.secretKey=${AWS_SECRET_KEY_USER}

# AWS S3 버킷 이름
cloud.aws.s3.bucket=${AWS_BUCKET}
############################################################################################

# AWS CloudFront ###########################################################################
cloud.aws.cloudfront.domain=${AWS_CLOUDFRONT_DOMAIN}
cloud.aws.cloudfront.url=${AWS_CLOUDFRONT_URL}
############################################################################################

# 사용자 정보 정규식
username.regex=^[a-zA-Z0-9]{4,20}$
nickname.regex=^[a-zA-Z0-9]{2,6}$
password.regex=^[a-zA-Z0-9!@#$%^&*()_+=\\[\\]{};':\"\\\\|,.<>/?`~]{8,20}$
############################################################################################
